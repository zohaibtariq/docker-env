services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel
    container_name: laravel
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./laravel:/var/www
      - ./docker/php/${ENVIRONMENT}.ini:/usr/local/etc/php/conf.d/local.ini
      - ./logs/laravel/${ENVIRONMENT}:/var/www/storage/logs
    env_file:
      - .env.${ENVIRONMENT}
    networks:
      - laravel
    depends_on:
      - webserver
      - mysql
      - redis
    user: root

  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./laravel:/var/www
      - ./nginx/default.conf.template:/etc/nginx/conf.d/default.conf.template
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - ./nginx/ssl/${ENVIRONMENT}:/etc/nginx/ssl
      - ./logs/nginx/${ENVIRONMENT}:/var/log/nginx
    env_file:
      - .env.${ENVIRONMENT}
#    environment:
#      - ENVIRONMENT=${ENVIRONMENT}
#      - APP_NAME=${APP_NAME}
#      - APP_ENV=${APP_ENV}
#      - APP_KEY=${APP_KEY}
#      - APP_DEBUG=${APP_DEBUG}
#      - APP_URL=${APP_URL}
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#      - SSL_CERTIFICATE=${SSL_CERTIFICATE}
#      - SSL_CERTIFICATE_KEY=${SSL_CERTIFICATE_KEY}
#      - MYSQL_DATABASE=${MYSQL_DATABASE}
#      - MYSQL_USER=${MYSQL_USER}
#      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#      - APP_TIMEZONE=${APP_TIMEZONE}
#      - APP_LOCALE=${APP_LOCALE}
#      - APP_FALLBACK_LOCALE=${APP_FALLBACK_LOCALE}
#      - APP_FAKER_LOCALE=${APP_FAKER_LOCALE}
#      - APP_MAINTENANCE_DRIVER=${APP_MAINTENANCE_DRIVER}
#      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS}
#      - LOG_CHANNEL=${LOG_CHANNEL}
#      - LOG_STACK=${LOG_STACK}
#      - LOG_DEPRECATIONS_CHANNEL=${LOG_DEPRECATIONS_CHANNEL}
#      - LOG_LEVEL=${LOG_LEVEL}
#      - DB_CONNECTION=${DB_CONNECTION}
#      - DB_HOST=${DB_HOST}
#      - DB_PORT=${DB_PORT}
#      - DB_DATABASE=${DB_DATABASE}
#      - DB_USERNAME=${DB_USERNAME}
#      - DB_PASSWORD=${DB_PASSWORD}
#      - SESSION_DRIVER=${SESSION_DRIVER}
#      - SESSION_LIFETIME=${SESSION_LIFETIME}
#      - SESSION_ENCRYPT=${SESSION_ENCRYPT}
#      - SESSION_PATH=${SESSION_PATH}
#      - SESSION_DOMAIN=${SESSION_DOMAIN}
#      - BROADCAST_CONNECTION=${BROADCAST_CONNECTION}
#      - FILESYSTEM_DISK=${FILESYSTEM_DISK}
#      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
#      - CACHE_STORE=${CACHE_STORE}
#      - CACHE_PREFIX=${CACHE_PREFIX}
#      - MEMCACHED_HOST=${MEMCACHED_HOST}
#      - REDIS_CLIENT=${REDIS_CLIENT}
#      - REDIS_HOST=${REDIS_HOST}
#      - REDIS_PORT=${REDIS_PORT}
#      - MAIL_MAILER=${MAIL_MAILER}
#      - MAIL_HOST=${MAIL_HOST}
#      - MAIL_PORT=${MAIL_PORT}
#      - MAIL_USERNAME=${MAIL_USERNAME}
#      - MAIL_PASSWORD=${MAIL_PASSWORD}
#      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
#      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
#      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
#      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
#      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
#      - AWS_BUCKET=${AWS_BUCKET}
#      - AWS_USE_PATH_STYLE_ENDPOINT=${AWS_USE_PATH_STYLE_ENDPOINT}
#      - VITE_APP_NAME=${VITE_APP_NAME}
    entrypoint: /usr/local/bin/start_nginx.sh
#    entrypoint: /bin/sh -c "/usr/local/bin/print_env.sh && envsubst '\$SSL_CERTIFICATE \$SSL_CERTIFICATE_KEY' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
#    entrypoint: /bin/sh -c "/usr/local/bin/print_env.sh && envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
#    entrypoint: /bin/sh -c "/usr/local/bin/print_env.sh && envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
#    entrypoint: /bin/sh -c "/usr/local/bin/print_env.sh && envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
#    entrypoint: /bin/sh -c "/usr/local/bin/print_env.sh && exec nginx -g 'daemon off;'"
#      - SSL_CERTIFICATE=${SSL_CERTIFICATE}
#      - SSL_CERTIFICATE_KEY=${SSL_CERTIFICATE_KEY}
    networks:
      - laravel

#  init_redis:
#    image: redis:latest
#    volumes:
#      - ./redis/redis.conf.template:/usr/local/etc/redis/redis.conf.template
#      - ./redis/set_redis_password.sh:/usr/local/bin/set_redis_password.sh
#      - ./.env.local:/usr/local/bin/.env.local
#      - ./.env.staging:/usr/local/bin/.env.staging
#      - ./.env.prod:/usr/local/bin/.env.prod
#    entrypoint: ["/bin/bash", "-c", "/usr/local/bin/set_redis_password.sh"]
#    networks:
#      - laravel
#    depends_on:
#      - redis

  redis:
#    image: redis:latest
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    env_file:
      - .env.${ENVIRONMENT}
#    environment:
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./redis/set_redis_password.sh:/usr/local/bin/set_redis_password.sh
      - ./logs/redis/${ENVIRONMENT}:/var/log/redis
      - ./.env.local:/usr/local/bin/.env.local
      - ./.env.staging:/usr/local/bin/.env.staging
      - ./.env.prod:/usr/local/bin/.env.prod
      - redis_data:/data
#      - ./redis/redis.conf.template:/usr/local/etc/redis/redis.conf.template
#    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
#    command: ["redis-server", "/usr/local/etc/redis/redis.conf.template"]
#    command: ["bash", "-c", "/usr/local/bin/set_redis_password.sh && redis-server /usr/local/etc/redis/redis.conf.template"]
#    command: ["bash", "-c", "./set_redis_password.sh && redis-server /usr/local/etc/redis/redis.conf.template"]
#    command: ["redis-server", "/usr/local/etc/redis/redis.conf.template", "--requirepass", "${REDIS_PASSWORD}"]
#    command: [ "bash", "-c", "/usr/local/bin/set_redis_password.sh && redis-server /usr/local/etc/redis/redis.conf.template" ]
#    entrypoint: [ "/bin/bash", "-c", "/usr/local/bin/set_redis_password.sh && exec redis-server /usr/local/etc/redis/redis.conf.template" ]
    networks:
      - laravel

  mysql:
    image: mysql:8.0.39
    container_name: mysql
    restart: unless-stopped
    env_file:
      - .env.${ENVIRONMENT}
#    environment:
#      - MYSQL_DATABASE=${DB_DATABASE}
#      - MYSQL_USER=${DB_USERNAME}
#      - MYSQL_PASSWORD=${DB_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./logs/mysql/${ENVIRONMENT}:/var/log/mysql
    networks:
      - laravel

networks:
  laravel:
    driver: bridge

volumes:
  mysql_data:
  redis_data: